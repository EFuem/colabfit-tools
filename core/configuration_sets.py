import itertools
import numpy as np

from core import ATOMS_LABELS_FIELD, ATOMS_NAME_FIELD
from core.observable import Observable


class ConfigurationSet(Observable):
    """
    Attributes:

        configurations (list):
            A list of ase.Atoms objects

        description (str):
            Human-readable metadata describing the configuration set.

        labels (list):
            A list of strings; generated by making a set from the list of all
            labels on the configurations. Used to improve queries.

        labels_counts (list):
            A list of integers of how many times each label appears in the
            configurations. Matches order of `labels`.

        elements (list):
            A list of strings of element names present in t he collection

        elements_ratios (list):
            A list of floats; the total concentration of each element, given as
            a fraction of the total number of atoms in the collection

        chemical_systems (list):
            A list of strings of chemical systems present in the collection

        nsites (int):
            The total number of atoms in the collection

    """

    _observers = []

    def __init__(self, configurations, description):
        self.configurations = configurations

        for conf in configurations:
            conf.attach(self)

        self.description    = description


    def attach(self, observer):
        self._observers.append(observer)

    def detach(self, observer):
        self._observers.remove(observer)

    def update(self):
        self.aggregate()
        self.notify()

    def notify(self):
        for observer in self._observers:
            observer.notify()


    @property
    def configurations(self):
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        self._configurations = configurations
        self.aggregate()


    def aggregate(self):

        self.n_configurations =  len(self.configurations)

        self.labels = sorted(list(set(itertools.chain.from_iterable([
            atoms.info[ATOMS_LABELS_FIELD] for atoms in self.configurations
        ]))))

        atoms_elements = [
            sorted(list(set(atoms.get_chemical_symbols())))
            for atoms in self.configurations
        ]

        self.chemical_systems = sorted(list(set([
            ''.join(_) for _ in atoms_elements
        ])))

        self.elements = sorted(list(set(itertools.chain.from_iterable(
            atoms_elements
        ))))

        self.nsites = 0
        elements_ratios = np.zeros((len(self.configurations), len(self.elements)))
        labels_counts = np.zeros((len(self.labels)))

        for i, atoms in enumerate(self.configurations):

            natoms = len(atoms)

            for e in set(atoms.get_chemical_symbols()):
                er = atoms.get_chemical_symbols().count(e)
                elements_ratios[i, self.elements.index(e)] = er

            for l in atoms.info[ATOMS_LABELS_FIELD]:
                labels_counts[self.labels.index(l)] += 1

            self.nsites += natoms

        self.elements_ratios = np.sum(elements_ratios, axis=0)
        self.elements_ratios /= self.nsites

        self.labels_counts = labels_counts


    def __str__(self):
        return 'ConfigurationSet('\
            'labels={}, elements={}, '\
                'elements_ratios={}, chemical_systems={}, nsites={},'\
                    ' n_configurations={}, description="{}")'.format(
                        {l: c for l,c in zip(
                            self.labels,
                            self.labels_counts
                        )},
                        self.elements,
                        self.elements_ratios,
                        self.chemical_systems,
                        self.nsites,
                        self.n_configurations,
                        self.description
                    )

    def __repr__(self):
        return str(self)